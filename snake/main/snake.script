local function put_food(self) 
    self.food = {x = math.random(2, 47), y = math.random(2, 47)} 
    tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3) 
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	-- the current list of segments for the snake
	self.segments = {
		{x = 7, y = 24},
		{x = 8, y = 24},
		{x = 9, y = 24},
		{x = 10, y = 24} }

	-- current direction of travel
	self.dir = {x = 1, y = 0}
	
	-- list of direction commands issued by the player to move
	self.dirqueue = {}
	self.speed = 7.0 
	self.alive = true
		
	self.t = 0
	
	math.randomseed(os.time()) 
    put_food(self)
end
	
function update(self, dt)
	self.t = self.t + dt
	-- time to move the snake?
	if self.t >= 1.0 / self.speed and self.alive then
		-- get the next command from the player (if any)
		if #self.dirqueue > 0 then
			local newdir = table.remove(self.dirqueue, 1) 
			-- is the command in the opposite direction of travel?
			-- if so ignore it, otherwise use it as the new direction of travel
			local opposite = newdir.x == -self.dir.x or newdir.y == -self.dir.y 
			if not opposite then
				self.dir = newdir 
			end
		end
		
		-- get the current head position
		local head = self.segments[#self.segments]
		-- create new head in the direction of movement
		local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}
		table.insert(self.segments, newhead)

		-- get what we're moving into on the level
		local tile = tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y)
		-- colliding with obstacle or self (2 = wall, 4 = snake)
		if tile == 2 or tile == 4 then
			self.alive = false
		-- food?
		elseif tile == 3 then
			self.speed = self.speed + 1
			put_food(self)
		-- nothing? get tail and remove it
		else
			local tail = table.remove(self.segments, 1)
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 1)
		end		
		
		-- update the remaining segments of the snake
		for i, s in ipairs(self.segments) do
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2)
		end
		
		self.t = 0
	end
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = 1}) 
    elseif action_id == hash("down") and action.pressed then
        table.insert(self.dirqueue, {x = 0, y = -1})
    elseif action_id == hash("left") and action.pressed then
        table.insert(self.dirqueue, {x = -1, y = 0})
    elseif action_id == hash("right") and action.pressed then
        table.insert(self.dirqueue, {x = 1, y = 0})
    end 
end